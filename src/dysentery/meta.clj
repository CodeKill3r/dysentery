(ns dysentery.meta
  "Works on getting metadata about a particular rekordbox track from a
  particular player."
  (require [dysentery.finder :as finder]
           [dysentery.util :as util]))


(defn send-bytes
  "Send a vector of byte values to an output stream."
  [os v]
  (let [obuf (byte-array (map util/make-byte v))]
    (.write os obuf 0 (count obuf))
    (.flush os)))

;; Temporary while working on analysis
(defonce last-bytes (atom nil))

(defn recv-bytes
  "Receive a buffer of bytes from an input stream, returning a vector
  of the number read and the buffer."
  [is]
  (let [ibuf (byte-array 4096)
        len (.read is ibuf)]
    #_(print "recv[" len "]: ")
    #_(doseq [i (range len)]
      (print (format "%02x " (util/unsign (aget ibuf i)))))
    #_(println)
    [len ibuf]))

(def usb-packet-templates
  "The series of packets needed to ask a particular player for
  metadata about a track in its USB slot. The outer array is for
  players numbered 1 through 4, and the inner array is the series of
  packets to send. The middle packet will get the track ID added as
  the final four bytes. If we can figure out more about how to
  construct these packets ourselves, I would be happier."
  [
   ;; Player 1
   [[0x11 0x87 0x23 0x49 0xae 0x11 0xff 0xff 0xff 0xfe 0x10 0x00 0x00 0x0f 0x01 0x14
     0x00 0x00 0x00 0x0c 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x00 0x00 0x00 0x03]
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x01 0x68 0x10 0x20 0x02 0x0f 0x02 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x03 0x01 0x03 0x01 0x11] ; Track ID (4 bytes) go here
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x01 0x69 0x10 0x30 0x00 0x0f 0x06 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x06 0x06 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x03 0x01 0x03 0x01 0x11 0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11
     0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11 0x00 0x00 0x00 0x00]]

   ;; Player 2
   [[0x11 0x87 0x23 0x49 0xae 0x11 0xff 0xff 0xff 0xfe 0x10 0x00 0x00 0x0f 0x01 0x14
     0x00 0x00 0x00 0x0c 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x00 0x00 0x00 0x03]
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x00 0x59 0x10 0x20 0x02 0x0f 0x02 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x03 0x01 0x03 0x01 0x11] ; Track ID (4 bytes) go here
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x00 0x5a 0x10 0x30 0x00 0x0f 0x06 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x06 0x06 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x03 0x01 0x03 0x01 0x11 0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11
     0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11 0x00 0x00 0x00 0x00]]

   ;; Player 3
   [[0x11 0x87 0x23 0x49 0xae 0x11 0xff 0xff 0xff 0xfe 0x10 0x00 0x00 0x0f 0x01 0x14
     0x00 0x00 0x00 0x0c 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x00 0x00 0x00 0x02]
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x00 0x4b 0x10 0x20 0x02 0x0f 0x02 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x02 0x01 0x03 0x01 0x11] ; Track ID (4 bytes) go here
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x00 0x4c 0x10 0x30 0x00 0x0f 0x06 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x06 0x06 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x02 0x01 0x03 0x01 0x11 0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11
     0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11 0x00 0x00 0x00 0x00]]

   ;; Player 4
   [[0x11 0x87 0x23 0x49 0xae 0x11 0xff 0xff 0xff 0xfe 0x10 0x00 0x00 0x0f 0x01 0x14
     0x00 0x00 0x00 0x0c 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x00 0x00 0x00 0x03]
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x01 0x48 0x10 0x20 0x02 0x0f 0x02 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x03 0x01 0x03 0x01 0x11] ; Track ID (4 bytes) go here
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x01 0x49 0x10 0x30 0x00 0x0f 0x06 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x06 0x06 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x03 0x01 0x03 0x01 0x11 0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11
     0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11 0x00 0x00 0x00 0x00]]])

(def sd-packet-templates
  "The series of packets needed to ask a particular player for
  metadata about a track in its SD slot. The outer array is for
  players numbered 1 through 4, and the inner array is the series of
  packets to send. The middle packet will get the track ID added as
  the final four bytes. If we can figure out more about how to
  construct these packets ourselves, I would be happier."
  [
   ;; Player 1
   [[0x11 0x87 0x23 0x49 0xae 0x11 0xff 0xff 0xff 0xfe 0x10 0x00 0x00 0x0f 0x01 0x14
     0x00 0x00 0x00 0x0c 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x00 0x11 0x00 0x00 0x00 0x03]
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x00 0xfe 0x10 0x20 0x02 0x0f 0x02 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x03 0x01 0x02 0x01 0x11] ; Track ID (4 bytes) go here
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x00 0xff 0x10 0x30 0x00 0x0f 0x06 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x06 0x06 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x03 0x01 0x02 0x01 0x11 0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11
     0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11 0x00 0x00 0x00 0x00]]

   ;; Player 2
   [[0x11 0x87 0x23 0x49 0xae 0x11 0xff 0xff 0xff 0xfe 0x10 0x00 0x00 0x0f 0x01 0x14
     0x00 0x00 0x00 0x0c 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x00 0x00 0x00 0x03]
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x00 0xab 0x10 0x20 0x02 0x0f 0x02 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x03 0x01 0x02 0x01 0x11] ; Track ID (4 bytes) go here
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x00 0xac 0x10 0x30 0x00 0x0f 0x06 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x06 0x06 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x03 0x01 0x02 0x01 0x11 0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11
     0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11 0x00 0x00 0x00 0x00]]

   ;; Player 3
   [[0x11 0x87 0x23 0x49 0xae 0x11 0xff 0xff 0xff 0xfe 0x10 0x00 0x00 0x0f 0x01 0x14
     0x00 0x00 0x00 0x0c 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x00 0x00 0x00 0x02]
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x02 0x34 0x10 0x20 0x02 0x0f 0x02 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x02 0x01 0x02 0x01 0x11] ; Track ID (4 bytes) go here
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x02 0x35 0x10 0x30 0x00 0x0f 0x06 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x06 0x06 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x02 0x01 0x02 0x01 0x11 0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11
     0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11 0x00 0x00 0x00 0x00]]

   ;; Player 4
   [[0x11 0x87 0x23 0x49 0xae 0x11 0xff 0xff 0xff 0xfe 0x10 0x00 0x00 0x0f 0x01 0x14
     0x00 0x00 0x00 0x0c 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x00 0x00 0x00 0x03]
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x01 0x24 0x10 0x20 0x02 0x0f 0x02 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x03 0x01 0x02 0x01 0x11] ; Track ID (4 bytes) go here
    [0x11 0x87 0x23 0x49 0xae 0x11 0x03 0x80 0x01 0x25 0x10 0x30 0x00 0x0f 0x06 0x14
     0x00 0x00 0x00 0x0c 0x06 0x06 0x06 0x06 0x06 0x06 0x00 0x00 0x00 0x00 0x00 0x00
     0x11 0x03 0x01 0x02 0x01 0x11 0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11
     0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x0a 0x11 0x00 0x00 0x00 0x00]]])

(defn request-metadata
  "Ask a player for metadata about a particular track."
  [player slot rekordbox-id]
  (when-let [device (finder/device-given-number player)]
    (let [templates (case slot
                      :usb (get usb-packet-templates (dec player))
                      :sd (get sd-packet-templates (dec player)))]
      (with-open [sock (java.net.Socket. (:address device) 1051)
                  os (.getOutputStream sock)
                  is (.getInputStream sock)]
        
        (.setSoTimeout sock 3000)
        (send-bytes os [0x11 00 00 00 01])
        (recv-bytes is)
        (send-bytes os (get templates 0))
        (recv-bytes is)
        (send-bytes os (concat (get templates 1)
                               [(bit-and (bit-shift-right rekordbox-id 24) 0xff)
                                (bit-and (bit-shift-right rekordbox-id 16) 0xff)
                                (bit-and (bit-shift-right rekordbox-id 8) 0xff)
                                (bit-and rekordbox-id 0xff)]))
        
        (recv-bytes is)
        (send-bytes os (get templates 2))
        (reset! last-bytes (recv-bytes is))
        (.close sock)))))

(defn build-int
  "Given a byte array, the index of the first byte of an integer
  value, and the number of bytes that make it up, calculates the
  integer that the bytes represent."
  [arr index size]
  (loop [i (inc index)
         left (dec size)
         result (util/unsign (aget arr index))]
    (if (pos? left)
      (recur (inc i) (dec left) (+ (* result 256) (util/unsign (aget arr i))))
      result)))

(defn analyze
  "Try to make sense of the track metadata in last-bytes."
  []
  (let [[packet-len arr] @last-bytes 
        title-len (build-int arr 90 4)
        artist-len (build-int arr (+ 184 (* 2 title-len)) 4)]
    (println "Title length:" title-len)
    (println "Title:" (String. arr 94 (* (dec title-len) 2) "UTF-16"))
    (println "Artist length:" artist-len)
    (println "Artist:" (String. arr (+ 188 (* 2 title-len)) (* (dec artist-len) 2) "UTF-16"))))
